<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{{establishment.name}} - Profile</title>
    <link rel="stylesheet" href="/styles/style.css">
    <link rel="stylesheet" href="/styles/shared_styles/reviews.css">
    <link rel="stylesheet" href="/styles/morestyles/restoProfile.css">
	<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
	<script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/2.3.8/purify.min.js"></script>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src="https://kit.fontawesome.com/b496b1e4d0.js" crossorigin="anonymous"></script>
	<style>
		.review-images-preview {
			display: flex;
			flex-wrap: wrap;
			gap: 10px;
			margin-top: 10px;
			margin-bottom: 15px;
		}
    
		.preview-image {
			width: 100px;
			height: 100px;
			object-fit: cover;
			border-radius: 4px;
			border: 1px solid #ddd;
		}
	</style>
	<style>
		.vote button {
			background: none;
			border: none;
			cursor: pointer;
			padding: 5px;
			margin: 0 5px;
			color: #666;
		}
		.vote button.active {
			color: #025000;
			font-weight: bold;
		}
    
		.upvote-count, .downvote-count {
			font-size: 0.8em;
			margin-left: 2px;
		}
	</style>
</head>
<body>

<div class="header">
    <div class="home">
        <a href="/">ANIMO
            <img style="height: 40px;" src="/icons/ANIMOEATS_logo.png" alt="jollysnorlax.png" >
            EATS</a>
    </div>
    <div class="navlink"> <a href="/restoList">Restaurants</a> </div>
    <div class="profile"><button id="profileBtn"> Log-in <i class="fa fa-solid fa-user"></i></button></div>
</div>

<div id="profileModal" class="modal">
    <div class="modal-content"><b>Existing Profile</b><br>
        <label for="username">
            <input id="username" type="text" placeholder="Username"> <br>
        </label>

        <label for="password">
            <input id="password" type="password" placeholder="Password">
        </label>
        <button id="loginBtn" class="button_dkgreen">Log-in <i class="fa fa-solid fa-user"></i></button>
        <p>Don't have an account yet? <a href="../sign-up.html">Sign-Up</a></p>
    </div>
</div>


<!-- Establishment Banner -->
<div class="resto-banner" style="background-image: url('{{establishment.bannerImage}}');">
    <div class="restaurant-info">
        <h1 class="resto-name">{{establishment.name}}</h1>
        <div class="primary-details">
            <p class="rating">
                {{establishment.overallRating}} 
                <img class="star-icon" src="/icons/star.png" alt="star"> 
                ({{establishment.reviews.length}} reviews)
            </p>
            <p class="address">{{establishment.address}}</p>
            <p class="phone">üìû{{establishment.phone}}</p>
        </div>
        <div class="supplementary-details">
            <span class="hours">Open {{establishment.openingHours}}</span>
            <span class="price">{{establishment.priceRange}}</span>
            <span class="cuisine">{{establishment.cuisine}}</span>
        </div>
    </div>
</div>

<!-- Tabs -->
<div class="establishment-tabs">
    <div class="tabs__sidebar">
        <button class="tabs__button" data-for-tab="1">Overview</button>
        <button class="tabs__button" data-for-tab="2">Menu</button>
        <button class="tabs__button" data-for-tab="3">Photos</button>
    </div>

    <!-- Overview -->
    <div class="tabs__content" data-tab="1">
        <p class="establishment-desc">{{establishment.description}}</p>

        <section class="rating-graph">
            <div class="rating">
                <div class="rating__average">
                    <h1>{{averageRating}}</h1>
                    <div class="star-outer">
                        <div class="star-inner" style="width: {{multiply averageRating 20}}%;"></div>
                    </div>
                    <p>{{totalRatings}} review{{#if (gt totalRatings 1)}}s{{/if}}</p>
                </div>
                <div class="rating__progress">
                    {{#each ratingData}}
                        <div class="rating__progress-value">
                            <p>{{this.star}} <span class="star"> &#9733;</span></p>
                            <div class="progress">
                                <div class="bar" style="width: {{this.percentage}}%;"></div>
                            </div>
                            <p>{{this.count}}</p>
                        </div>
                    {{/each}}
                </div>
            </div>
        </section>

        <!-- Review Submission Form -->
        <div class="review-section">
            <h2>Leave a Review</h2>
			<form id="reviewForm">
                <input type="text" id="reviewTitle" placeholder="Enter a title for your review" required>
				<textarea id="reviewBody" placeholder="Share your experience..." required></textarea>
				<select id="reviewRating">
					<option value="5">‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è</option>
					<option value="4">‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è</option>
					<option value="3">‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è</option>
					<option value="2">‚≠êÔ∏è‚≠êÔ∏è</option>
					<option value="1">‚≠êÔ∏è</option>
				</select>
				<input type="file" id="reviewMedia" multiple accept="image/*" onchange="loadReviewImages(event)">
				<div id="reviewImagesPreview" class="review-images-preview"></div>
				<button type="submit">Submit Review</button>
			</form>
        </div>

        <script>
		document.getElementById("reviewForm").addEventListener("submit", async function (e) {
            e.preventDefault();
            const title = document.getElementById("reviewTitle").value;
            const body = document.getElementById("reviewBody").value;
            const rating = document.getElementById("reviewRating").value;
            const establishmentId = "{{establishment._id}}";

            let formData = new FormData();
            formData.append("title", title); // ‚úÖ Add title here
            formData.append("establishmentId", establishmentId);
            formData.append("body", body);
            formData.append("rating", rating);

            const mediaFiles = document.getElementById("reviewMedia").files;
            for (let i = 0; i < mediaFiles.length; i++) {
                formData.append("media", mediaFiles[i]);
            }

            const response = await fetch("/api/reviews", {
                method: "POST",
                body: formData,
            });

            const result = await response.json();
            if (response.ok) {
                document.getElementById("reviewTitle").value = "";
                document.getElementById("reviewBody").value = "";
                alert("Review posted!");
                location.reload();
            } else {
                console.error("Review submission error:", result);
                alert("Failed to post review: " + result.details);
            }
        });

        </script>

        <!-- Reviews 
        <section class="reviews-holder">
            <h2>Reviews</h2>
            {{#each establishment.reviews}}
                <article class="reviews">
                    <div class="review-container">
                        <img class="display-pic" src="{{this.userId.avatar}}" alt="User image">
                        <div class="heading">
                            <a href="/userProfile/{{this.userId._id}}">{{this.userId.username}}</a>
                        </div>
                        <div class="star-rating">
                            <img class="star-icon-review" src="/icons/star.png" alt="star">
                            {{this.rating}}
                        </div>
                        <div class="description">{{{this.body}}}</div>
                        <div class="date">{{formatDate this.createdAt}} |</div>
                        {{#if this.edited}}
                            <div class="edited">edited |</div>
                        {{/if}}
                        <div class="vote">
                            <button class="upvote"><i class="fa-solid fa-up-long"></i></button>
                            <button class="downvote"><i class="fa-solid fa-down-long"></i></button>
                        </div>
                    </div>
                </article>
            {{/each}}
        </section>
    </div>
    -->
    <section class="reviews-holder">
        <h2>Reviews</h2>
        <input type="text" id="reviewSearch" placeholder="Search reviews..." oninput="filterReviews()">
        <script>
            function filterReviews() {
                let searchQuery = document.getElementById('reviewSearch').value.toLowerCase();
                let reviews = document.querySelectorAll('.reviews');

                reviews.forEach(review => {
                    let reviewText = review.querySelector('.description').innerText.toLowerCase();
                    if (reviewText.includes(searchQuery)) {
                        review.style.display = "block";
                    } else {
                        review.style.display = "none";
                    }
                });
            }
        </script>


        {{#each establishment.reviews}}
            <article class="reviews">
                <div class="review-container" data-review-id="{{this._id}}">
                    <img class="display-pic" src="{{this.userId.avatar}}" alt="User image">
                    <div class="heading">
                        <a href="/userProfile/{{this.userId._id}}">{{this.userId.username}}</a>
                    </div>
                    <div class="star-rating">
                        <img class="star-icon-review" src="/icons/star.png" alt="star">
                        {{this.rating}}
                    </div>
                    <div class="heading"> {{this.title}} </div>
                    <div class="description">{{{this.body}}}</div>
                    {{#if this.media}}
                        <div class="review-images">
                            {{#each this.media}}
                                <img src="{{this}}" alt="Review Image">
                            {{/each}}
                        </div>
                    {{/if}}
                    <div class="date">{{formatDate this.createdAt}} </div>
                    {{#if this.edited}}
                        <div class="edit-tag"> edited </div>
                    {{/if}}
                    <div class="vote">
						<button class="upvote"><i class="fa-solid fa-up-long"></i> <span class="upvote-count">{{this.upvoteCount}}</span></button>
						<button class="downvote"><i class="fa-solid fa-down-long"></i> <span class="downvote-count">{{this.downvoteCount}}</span></button>
                    </div>
                </div>
            </div>
        </article>
    {{/each}}
</section>
</div> <!-- This closing div is important! It ends the Overview tab content -->

    <!-- Menu -->
    <div class="tabs__content" data-tab="2">
        <div class="menu-tab">
            {{#each menu}}
                <img src="{{this}}" alt="Menu Image">
            {{/each}}
        </div>
    </div>

    <!-- Photos -->
    <div class="tabs__content" data-tab="3">
        <div class="photo-tab">
            {{#each photos}}
                <img src="{{this}}" alt="Gallery Image">
            {{/each}}
        </div>
    </div>
</div>

<!-- Tab Switching Script -->
<script>
    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll(".tabs__button").forEach(button => {
            button.addEventListener("click", () => {
                const tabsContainer = button.closest(".establishment-tabs");
                const tabNumber = button.dataset.forTab;
                const tabToActivate = tabsContainer.querySelector(`.tabs__content[data-tab="${tabNumber}"]`);

                tabsContainer.querySelectorAll(".tabs__button").forEach(btn => btn.classList.remove("tabs__button--active"));
                tabsContainer.querySelectorAll(".tabs__content").forEach(tab => tab.classList.remove("tabs__content--active"));

                button.classList.add("tabs__button--active");
                tabToActivate.classList.add("tabs__content--active");
            });
        });

        // Auto activate the first tab
        document.querySelector('.tabs__button[data-for-tab="1"]').click();
    });
</script>
<script>
    function loadReviewImages(event) {
        const previewContainer = document.getElementById('reviewImagesPreview');
        previewContainer.innerHTML = ''; // Clear previous previews
        
        const files = event.target.files;
        
        if (files.length > 0) {
            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                const reader = new FileReader();
                
                reader.onload = function() {
                    const img = document.createElement('img');
                    img.src = reader.result;
                    img.className = 'preview-image';
                    previewContainer.appendChild(img);
                }
                
                reader.readAsDataURL(file);
            }
        }
    }
</script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Add click handlers to vote buttons
        document.querySelectorAll('.upvote, .downvote').forEach(button => {
            button.addEventListener('click', async function() {
                const reviewContainer = this.closest('.review-container');
                const reviewId = reviewContainer.dataset.reviewId;
                const voteType = this.classList.contains('upvote') ? 'up' : 'down';
                
                try {
                    const response = await fetch('/api/vote-simple', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                       body: JSON.stringify({
							reviewId,
							voteType
						})
                    });
                    
                    if (response.ok) {
                        // Simple toggle active class
                        if (this.classList.contains('active')) {
                            this.classList.remove('active');
                        } else {
                            if (voteType === 'up') {
                                reviewContainer.querySelector('.upvote').classList.add('active');
                                reviewContainer.querySelector('.downvote').classList.remove('active');
                            } else {
                                reviewContainer.querySelector('.upvote').classList.remove('active');
                                reviewContainer.querySelector('.downvote').classList.add('active');
                            }
                        }
                        
                        // Reload to update count
                        location.reload();
                    } else {
                        console.error('Vote failed');
                    }
                } catch (error) {
                    console.error('Error:', error);
                }
            });
        });
    });
</script>
<script src="/scripts/profileModal.js"></script>
</body>
</html>
